/*! bemquery-core v0.1.5 | (c) 2016-2017 BEMQuery team | MIT license (see LICENSE) */import bsc from'bemquery-selector-converter';import SelectorEngine from'bemquery-selector-engine';function checkConverter(a){return'object'==typeof a&&'function'==typeof a.convert}function checkSelectorEngine(a){return'object'==typeof a&&'function'==typeof a.find}function determineContext(a){return a instanceof BEMQuery&&(a=a.elements[0]),a instanceof HTMLElement||a===document||(a=document),a}function fetchElements(a,b,c,d){if(!a)throw new TypeError('Selector must be set.');if('string'==typeof a)return a=c.convert(a).CSS,d.find(a,b);if(a instanceof HTMLElement)return[a];if(a instanceof BEMQuery)return a.elements;if('object'==typeof a)return Array.from(a);throw new TypeError('Selector must be a string, object, array or DOM element.')}function defineProperties(a,b){Object.defineProperty(a,'elements',{value:b}),a.elements.forEach((c,d)=>{Object.defineProperty(a,d,{enumerable:!0,get(){return new BEMQuery(this.elements[d],document,this.converter,this.selectorEngine)}})},a),Object.defineProperty(a,'length',{enumerable:!0,get(){return this.elements.length}})}class BEMQuery{constructor(a,b,c,d){if(!checkConverter(c))throw new TypeError('Converter must be an object with convert method defined.');if(!checkSelectorEngine(d))throw new TypeError('SelectorEngine must be an object with find method defined.');this.converter=c,this.selectorEngine=d,b=determineContext(b),defineProperties(this,fetchElements(a,b,c,d))}get(a){if(a=+a,Number.isNaN(a))throw new TypeError('Index must be a correct Number.');else if(0>a)throw new RangeError('Index must be greater or equal to 0.');else if(a>this.elements.length-1)throw new RangeError('Index cannot be greater than collection\'s length.');return new BEMQuery(this.elements[a],document,this.converter,this.selectorEngine)}each(a){if('function'!=typeof a)throw new TypeError('Callback must be a function.');const b=this.converter,c=this.selectorEngine;return this.elements.forEach(d=>{a(new BEMQuery(d,document,b,c))}),this}[Symbol.iterator](){let a=0;const b=this.elements,c=this.converter,d=this.selectorEngine;return{next(){if(a<b.length){const e=b[a++];return{value:new BEMQuery([e],document,c,d),done:!1}}return{done:!0}}}}}function factory(a,b=document){const c=bsc(),d=new SelectorEngine,e=new BEMQuery(a,b,c,d);return e}export{BEMQuery};export default factory;
//# sourceMappingURL=bemquery-core.js.map
