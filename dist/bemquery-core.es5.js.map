{"version":3,"file":"bemquery-core.es5.js","sources":["../src/BEMQuery.js","../src/factory.js"],"sourcesContent":["'use strict';\n\nfunction checkConverter( converter ) {\n\treturn typeof converter === 'object' && typeof converter.convert === 'function';\n}\n\nfunction checkSelectorEngine( selectorEngine ) {\n\treturn typeof selectorEngine === 'object' && typeof selectorEngine.find === 'function';\n}\n\nfunction determineContext( context ) {\n\tif ( context instanceof BEMQuery ) { // eslint-disable-line no-use-before-define\n\t\tcontext = context.elements[ 0 ];\n\t}\n\n\tif ( !( context instanceof HTMLElement ) && context !== document ) {\n\t\tcontext = document;\n\t}\n\n\treturn context;\n}\n\nfunction fetchElements( query, context, converter, selectorEngine ) {\n\tif ( !query ) {\n\t\tthrow new TypeError( 'Selector must be set.' );\n\t}\n\n\tif ( typeof query === 'string' ) {\n\t\tquery = converter.convert( query ).CSS;\n\t\treturn selectorEngine.find( query, context );\n\t} else if ( query instanceof HTMLElement ) {\n\t\treturn [\n\t\t\tquery\n\t\t];\n\t} else if ( query instanceof BEMQuery ) { // eslint-disable-line no-use-before-define\n\t\treturn query.elements;\n\t} else if ( typeof query === 'object' ) {\n\t\treturn Array.from( query );\n\t} else {\n\t\tthrow new TypeError( 'Selector must be a string, object, array or DOM element.' );\n\t}\n}\n\nfunction defineProperties( obj, elements ) {\n\tObject.defineProperty( obj, 'elements', {\n\t\tvalue: elements\n\t} );\n\n\tobj.elements.forEach( ( element, index ) => {\n\t\tObject.defineProperty( obj, index, {\n\t\t\tenumerable: true,\n\t\t\tget() {\n\t\t\t\treturn new BEMQuery( this.elements[ index ], document, this.converter, this.selectorEngine ); // eslint-disable-line no-use-before-define\n\t\t\t}\n\t\t} );\n\t}, obj );\n\n\tObject.defineProperty( obj, 'length', {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this.elements.length;\n\t\t}\n\t} );\n}\n\n/** Class representing elements collection. */\nclass BEMQuery {\n\t/**\n\t * Creates elements collection.\n\t *\n\t * @param {String|Iterable|HTMLElement} query Selector or\n\t * existing elements collection upon which the new elements collection\n\t * should be created.\n\t * @param {Document|HTMLElement|BEMQuery} context Context from which\n\t * elements should be fetched.\n\t * @param {Converter} converter BEM selector converter to be used.\n\t * @param {SelectorEngine} selectorEngine CSS selector engine to be used\n\t * by the current and descendant `BEMQuery` instances.\n\t * @class\n\t */\n\tconstructor( query, context, converter, selectorEngine ) {\n\t\tif ( !checkConverter( converter ) ) {\n\t\t\tthrow new TypeError( 'Converter must be an object with convert method defined.' );\n\t\t}\n\n\t\tif ( !checkSelectorEngine( selectorEngine ) ) {\n\t\t\tthrow new TypeError( 'SelectorEngine must be an object with find method defined.' );\n\t\t}\n\n\t\tthis.converter = converter;\n\t\tthis.selectorEngine = selectorEngine;\n\n\t\tcontext = determineContext( context );\n\n\t\tdefineProperties( this, fetchElements( query, context, converter, selectorEngine ) );\n\t}\n\n\t/**\n\t * Gets element with given index.\n\t *\n\t * @param {Number} index Element's index.\n\t * @return {BEMQuery} New BEMQuery instance with fetched element\n\t * as an only element in the collection.\n\t */\n\tget( index ) {\n\t\tindex = Number( index );\n\n\t\tif ( Number.isNaN( index ) ) {\n\t\t\tthrow new TypeError( 'Index must be a correct Number.' );\n\t\t} else if ( index < 0 ) {\n\t\t\tthrow new RangeError( 'Index must be greater or equal to 0.' );\n\t\t} else if ( index > ( this.elements.length - 1 ) ) {\n\t\t\tthrow new RangeError( 'Index cannot be greater than collection\\'s length.' );\n\t\t}\n\n\t\treturn new BEMQuery( this.elements[ index ], document, this.converter, this.selectorEngine );\n\t}\n\n\t/**\n\t * Executes callback on every element in the collection.\n\t *\n\t * @param {Function} callback Callback to be executed.\n\t * @return {BEMQuery} Current `BEMQuery` instance.\n\t */\n\teach( callback ) {\n\t\tif ( typeof callback !== 'function' ) {\n\t\t\tthrow new TypeError( 'Callback must be a function.' );\n\t\t}\n\n\t\tconst converter = this.converter;\n\t\tconst selectorEngine = this.selectorEngine;\n\n\t\tthis.elements.forEach( ( element ) => {\n\t\t\tcallback( new BEMQuery( element, document, converter, selectorEngine ) );\n\t\t} );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns iterator for contained elements.\n\t *\n\t * @return {Iterator} Returned iterator.\n\t */\n\t[ Symbol.iterator ]() {\n\t\tlet i = 0;\n\t\tconst elements = this.elements;\n\t\tconst converter = this.converter;\n\t\tconst selectorEngine = this.selectorEngine;\n\n\t\treturn {\n\t\t\tnext() {\n\t\t\t\tif ( i < elements.length ) {\n\t\t\t\t\tconst element = elements[ i++ ];\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: new BEMQuery( [ element ], document, converter, selectorEngine ),\n\t\t\t\t\t\tdone: false\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tdone: true\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport default BEMQuery;\n","'use strict';\n\nimport bsc from 'bemquery-selector-converter';\nimport SelectorEngine from 'bemquery-selector-engine';\nimport BEMQuery from './BEMQuery';\n\n/**\n * BEMQuery instance factory.\n *\n * @param {String|Iterable|HTMLElement} query Selector or\n * existing elements collection upon which the new elements collection\n * should be created.\n * @param {Document|HTMLElement|BEMQuery} context Context from which\n * elements should be fetched.\n * @return {BEMQuery} New BEMQuery instance.\n */\nfunction factory( query, context = document ) {\n\tconst converter = bsc();\n\tconst selectorEngine = new SelectorEngine();\n\tconst bemQuery = new BEMQuery( query, context, converter, selectorEngine );\n\n\treturn bemQuery;\n}\n\nexport default factory;\n"],"names":["checkConverter","converter","convert","checkSelectorEngine","selectorEngine","find","determineContext","context","BEMQuery","elements","HTMLElement","document","fetchElements","query","TypeError","CSS","Array","from","defineProperties","obj","defineProperty","forEach","element","index","this","length","factory","bsc","SelectorEngine","bemQuery","Number","isNaN","RangeError","callback","Symbol","iterator","i"],"mappings":";mYAEA,SAASA,GAAgBC,SACI,+BAAdA,iBAAAA,KAAuD,kBAAtBA,GAAUC,QAG1D,QAASC,GAAqBC,SACI,+BAAnBA,iBAAAA,KAA8D,kBAAxBA,GAAeC,KAGpE,QAASC,GAAkBC,SACrBA,aAAmBC,OACbD,EAAQE,SAAU,IAGrBF,YAAmBG,cAAiBH,IAAYI,aAC7CA,UAGJJ,EAGR,QAASK,GAAeC,EAAON,EAASN,EAAWG,OAC5CS,OACC,IAAIC,WAAW,4BAGA,gBAAVD,YACHZ,EAAUC,QAASW,GAAQE,IAC5BX,EAAeC,KAAMQ,EAAON,EAC7B,IAAKM,YAAiBH,oBAE3BG,EAEK,IAAKA,YAAiBL,SACrBK,GAAMJ,QACP,IAAsB,+BAAVI,iBAAAA,UACXG,OAAMC,KAAMJ,QAEb,IAAIC,WAAW,4DAIvB,QAASI,GAAkBC,EAAKV,UACxBW,eAAgBD,EAAK,kBACpBV,MAGJA,SAASY,QAAS,SAAEC,EAASC,UACzBH,eAAgBD,EAAKI,eACf,uBAEJ,IAAIf,GAAUgB,KAAKf,SAAUc,GAASZ,SAAUa,KAAKvB,UAAWuB,KAAKpB,oBAG5Ee,UAEIC,eAAgBD,EAAK,sBACf,uBAEJK,MAAKf,SAASgB,UC5CxB,QAASC,GAASb,MAAON,0DAAUI,SAC5BV,EAAY0B,IACZvB,EAAiB,GAAIwB,GACrBC,EAAW,GAAIrB,GAAUK,EAAON,EAASN,EAAWG,SAEnDyB,+lBD6CFrB,wBAcQK,EAAON,EAASN,EAAWG,iBACjCJ,EAAgBC,QACf,IAAIa,WAAW,gEAGhBX,EAAqBC,QACpB,IAAIU,WAAW,mEAGjBb,UAAYA,OACZG,eAAiBA,IAEZE,EAAkBC,KAEViB,KAAMZ,EAAeC,EAAON,EAASN,EAAWG,0CAU9DmB,QACIO,OAAQP,GAEXO,OAAOC,MAAOR,QACZ,IAAIT,WAAW,kCACf,IAAKS,EAAQ,OACb,IAAIS,YAAY,uCAChB,IAAKT,EAAUC,KAAKf,SAASgB,OAAS,OACtC,IAAIO,YAAY,2DAGhB,IAAIxB,GAAUgB,KAAKf,SAAUc,GAASZ,SAAUa,KAAKvB,UAAWuB,KAAKpB,6CASvE6B,MACoB,kBAAbA,QACL,IAAInB,WAAW,mCAGhBb,GAAYuB,KAAKvB,UACjBG,EAAiBoB,KAAKpB,2BAEvBK,SAASY,QAAS,SAAEC,KACd,GAAId,GAAUc,EAASX,SAAUV,EAAWG,MAGhDoB,YAQNU,OAAOC,6BACJC,GAAI,EACF3B,EAAWe,KAAKf,SAChBR,EAAYuB,KAAKvB,UACjBG,EAAiBoB,KAAKpB,yCAIrBgC,EAAI3B,EAASgB,OAAS,IACpBH,GAAUb,EAAU2B,kBAGlB,GAAI5B,IAAYc,GAAWX,SAAUV,EAAWG,SACjD,gBAKD"}